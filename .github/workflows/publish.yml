name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org

      - name: Clear npm cache
        run: |
          npm cache clean --force
          rm -rf ~/.npm/_npx || true

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Verify build version
        run: |
          echo "Built version: $(node dist/index.js --version)"
          echo "Package.json version: $(node -p "require('./package.json').version")"

      - name: Publish to npmjs (unscoped)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          PUBLISHED=$(npm view buildworks-ai-investigations-mcp version || echo '0.0.0')
          echo "npmjs current=${CURRENT} published=${PUBLISHED}"
          if [ "$CURRENT" != "$PUBLISHED" ]; then
            npm publish --loglevel=verbose
            echo "Published version ${CURRENT} to npmjs"
          else
            echo "Skip npmjs publish: ${CURRENT} already published"
          fi

      - name: Verify published package
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          echo "Verifying published package version..."
          echo "Expected version: ${CURRENT}"
          
          # Wait for npm registry to update with retries
          for i in {1..5}; do
            echo "Attempt $i: Checking npm registry..."
            sleep 15
            REGISTRY_VERSION=$(npm view buildworks-ai-investigations-mcp version)
            echo "Registry version: ${REGISTRY_VERSION}"
            
            if [ "$CURRENT" = "$REGISTRY_VERSION" ]; then
              echo "✅ Registry version matches: ${CURRENT}"
              break
            else
              echo "⏳ Registry not updated yet, waiting..."
              if [ $i -eq 5 ]; then
                echo "⚠️ Registry not updated after 5 attempts, but continuing..."
                break
              fi
            fi
          done
          
          echo "✅ Package published successfully to npm"

      - name: Configure GitHub Packages registry
        run: |
          cp package.json package.npm.json
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            pkg.name = "@buildworksai/investigations-mcp";
            pkg.publishConfig = { registry: "https://npm.pkg.github.com" };
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          '
          echo "@buildworksai:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://npm.pkg.github.com
          scope: '@buildworksai'

      - name: Verify GitHub Packages auth and registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm config get registry || true
          npm whoami --registry=https://npm.pkg.github.com || true
          npm ping --registry=https://npm.pkg.github.com || true

      - name: Publish to GitHub Packages (scoped)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          GH_PUBLISHED=$(npm view @buildworksai/investigations-mcp version --registry=https://npm.pkg.github.com || echo '0.0.0')
          echo "gh-pkg current=${CURRENT} published=${GH_PUBLISHED}"
          npm config list -l || true
          if [ "$CURRENT" != "$GH_PUBLISHED" ]; then
            npm publish --loglevel=verbose
          else
            echo "Skip GH Packages publish: ${CURRENT} already published"
          fi

          - name: Restore package.json
            run: mv -f package.npm.json package.json

          - name: Update Global Installation (Optional)
            env:
              NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
            run: |
              echo "=== GLOBAL INSTALLATION UPDATE ==="
              CURRENT=$(node -p "require('./package.json').version")
              echo "Updating global installation to version ${CURRENT}..."
              
              # Check if we should update global installation
              # This is optional and can be controlled by environment variable
              if [ "${{ vars.UPDATE_GLOBAL_INSTALLATION }}" = "true" ]; then
                echo "Global installation update is enabled"
                npm install -g buildworks-ai-investigations-mcp@${CURRENT}
                echo "✅ Global installation updated to version ${CURRENT}"
              else
                echo "Global installation update is disabled (set UPDATE_GLOBAL_INSTALLATION=true to enable)"
                echo "Users can manually update with: npm install -g buildworks-ai-investigations-mcp@latest"
              fi
